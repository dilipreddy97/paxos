Paxos 
 - Assumed at least one replica never crashes (ie no total failures)
     -Client -> Server message (k, cid, operation): (client-id, command or sequence number, actual command)
- ensures all replicas receive commands in the same order
- Assume messaging between clients is reliable (not necessarily FIFO)
- Used in Chubby and Zookeeper

Invariants
	Replica:
	-R1: There are no two different commands decided for the same slot
	-R2: For each replica, all slot numbers less than the current slot number must have its corresponding command (if it has one) in the replica's set of decisions
	-R3: A replica's current state is the result of applying the operations in its set of decisions from its initial state, in order of slot number.
	-R4: For each replica, its current slot number cannot decrease over time

	Acceptor:
	-A1: An acceptor can only adopt strictly increasing ballot numbers
	-A2: An acceptor can only add a prospective proposal triple into its accepted set if the triple's ballot number is equal to the acceptor's current ballot number
	-A3: An acceptor cannot remove a proposal triple from its accept set (will be modified to be more practical)
	-A4: Given a particular ballot number and slot number, there can be at most one proposal under consideration by the set of acceptors
	-A5: If a majority of acceptors have accepted a proposal for a given slot number at a particular ballot, then any proposal accepted with a higher ballot number for the same slot has to use the same proposal.

	Commander:
	-C1: For any ballot number and slot number, at most one commander is spawned
	-C2: If a majority of acceptors have accepted a proposal for a given slot number at a particular ballot, then a commander spawned to propose with a higher ballot number for the same slot has to use the same proposal.

Pseudocode in plain English

Replica (leaders, initial_state):
   Initialize state = initial_state
   Slot_num = 1
   Proposals set is empty
   Decision set is empty

   function propose(p)
      if there has been a decision for p already
      	skip
      otherwise:
         Determine lowest unused slot number s'
         Add s' and p into proposal set
         Send <propose, s', p> to all leaders

   function perform(<k, cid, operation>) Note: invoked with same sequence of commands at all replicas
     If operation is new
        Evaluate operation
        Send result of operation to client

    for ever:
       If received a request from client with   bb:
          Invoke propose(p)
       If received a decision message (from commander) 
         Add decision to set of decisions
         For each decision in set of decisions
           If there's a decision p' corresponding to the current slot_num
              If a p'' has been proposed (ie in proposal set) for the same slot number
                Re-propose p'' with a different ballot number
              Invoked perform(p')

Acceptor


Commander


Scout


Leader
              



